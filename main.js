// Очень часто возникает задача обмена данными между котроллером и директивой. 
//разберем что такое scope: false в директиве и как получить доступ к переменным и методам контроллера из директивы.

// Создадим новый контроллер <div ng-controller='mainCtrl'></div>
// опишем его и зиджектим в него $scope
//app.controller('mainCtrl', function($scope){  
//});

// Теперь создадим директиву она у нас будет внутри контроллера
// <div ng-controller='mainCtrl'>
    // <post></post>
// </div>

// опишем директиву post укажем link : function
// app.directive('post', function(){
//     
    // return {
        // link : function(scope, element, attrs){
            // console.log('scope', scope);
        // }
    // };
// });

// добавим console.log также в mainCtrl
// app.controller('mainCtrl', function($scope){
    // console.log('mainCtrl $scope', $scope);
// });

//Посмотрим в консоль браузера что у нас выведется
// Как мы видим  у нас вывелся контроллер $scope и scope директивы
//  Для того чтобы было понятней создадим в контроллере переменную, например $scope.posts и присвоим ей пустой массив;
// $scope.posts = [];

//Теперь посмотрим в консоль браузера и увидим что оба этих скоупа АБСОЛЮТНО ОДИНАКОВЫЕ!!!
// И ТАМ И ТАМ ЕСТЬ SCOPE POSTS ПУСТОЙ МАССИВ ХОТЯ В ДИРЕКТИВЕ МЫ ЕГО НЕ ОБЪЯВЛЯЛИ
// ЭТО ПОТОМУ ЧТО ПО УМОЛЧАНИЮ ДИРЕКТИВА НАСЛЕДУЕТ СКОУП КОНТРОЛЛЕРА В КОТОРОМ ОНА БЫЛА ИНИЦИАЛИЗИРОВАНА
// ПОЭТОМУ В НАШЕМ СЛУЧАЕ СКОУП КОНТРОЛЛЕРА БУДЕТ РАВНЯТЬСЯ СКОУПУ ВЛОЖЕННОЙ В НЕГО ДИРЕКТИВЫ 

// ЭТО ТО ЖЕ САМОЕ ЕСЛИ БЫ МЫ НАПИСАЛИ У ДИРЕКТИВЫ ПРОПЕРТИ scope : false, 
// это тот скоуп который стоит у директивы по умолчанию
//Что это дает нам делать?
//Это  очень легкий способ общаться контроллеру с директивой но он очень опасный
// Почему он опасный?
// Давайте создадим переменную $scope.hello и присвоим ей "Hello" и выведм её над нашей директивой

// И теперь если мы забыли что у нас стоит scope: false, или если мы не определили так как он в таком виде стоит по умолчанию
// Мы можем в линк функцию директивы написать scope.hello и присвоить "HI"
// ИЗ-ЗА ЭТОГО ПЕРЕМЕННАЯ hello ПЕРЕОПРЕДЕЛИТСЯ И У НАС ВЫВЕДЕТСЯ 'HI' ВМЕСТО 'HELLO'
// ВСЕ ПОТОМУ ЧТО ДИРЕКТИВА ИМЕЕТ ВОЗМОЖНОСТЬ МЕНЯТЬ КОНТРОЛЛЕР КАК УГОДНО

// ПОЭТОМУ ЕСЛИ МЫ ХОТИМ ОПИСАТЬ ДИРЕКТИВУ КОТОРАЯ БУДЕТ ИСПОЛЬЗОВАТЬСЯ В РАЗНЫХ МЕСТАХ ТО НАДО ПОМНИТЬ О ТОМ ЧТО scope : false, ЛУЧШЕ ОТКЛЮЧАТЬ

//Теперь давайте в  массив posts добавим пару записей 
// {
      // name: "This is post about cats"
    // },
    // {
      // name: "This is post about dogs"
    // }
    
//Теперь в директиве мы можем использовать и записи posts
//И это массив из двух объектов с именем posts
// Теперь мы можем создать template : "<div ng-repeat = 'post in posts'>{{post.name}}</div>"
//В результате у нас через шаблон вывелось два поста внутри директивы
//Это очень удобно но не особо правильно с точки зрения РАЗДЕЛЕНИЯ ЛОГИКИ
//Потому как мы можем легко модифицировать posts который находится внутри контроллера
// Для того чтобы код немного разделить и не читать напрямую $scope.posts
//ЛУЧШЕ СОЗДАТЬ ФУНКЦИЮ $scope.getPosts которая будет публичной и в ней мы будем возвращать значение $scope.posts
//Находится она будет в нашем обертывающем директиву контроллере
// Теперь поменяем еще в шаблоне переменную posts на getPosts()
// template: "<div ng-repeat='post in getPosts()'>{{post.name}}</div>",
// Как мы видим код работает точно также и нет никакой проблемы в том если 
// у нас posts поменяется на еще что-то 
//Функция getPosts все равно продолжит работать так как она не привязана к какой-то переменной


//ПОЭТОМУ ВСЕГДА НАДО ПОМНИТЬ О ЗНАЧЕНИИ SCOPE : FALSE, ПО-УМОЛЧАНИЮ
// И ИСПОЛЬЗОВАТЬ ДЛЯ ОБХОДА ЭТОЙ ПРОБЛЕМЫ ПРОМЕЖУТОЧНУЮ ФУНКЦИЮ ВОЗВРАЩАЮЩУЮ ЗНАЧЕНИЕ НУЖНОЙ ПЕРЕМЕННОЙ!!!



var app = angular.module('app', []);



app.controller('mainCtrl', function($scope){
    $scope.posts = [
       {
      name: "This is post about cats"
    },
    {
      name: "This is post about dogs"
    }
    ];
    console.log('mainCtrl $scope', $scope);
    $scope.hello = "hello";
    
    $scope.getPosts = function () {
    return $scope.posts;
  };
});





app.directive('post', function(){
    
    return {
        scope : false,
        template : "<div ng-repeat = 'post in getPosts()'>{{post.name}}</div>",
        link : function(scope, element, attrs){
            console.log('scope', scope);
            scope.hello = "HI";
        }
    };
    
 
});












